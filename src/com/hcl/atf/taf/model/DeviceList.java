package com.hcl.atf.taf.model;

// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * DeviceList generated by hbm2java
 */
@Entity
@Table(name = "device_list", uniqueConstraints = @UniqueConstraint(columnNames = "deviceId"))
public class DeviceList implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer deviceListId;
	private HostList hostList;
	private DeviceModelMaster deviceModelMaster;
	private DevicePlatformVersionListMaster devicePlatformVersionListMaster;
	private CommonActiveStatusMaster commonActiveStatusMaster;
	private String deviceId;
	private Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists = new HashSet<TestRunSelectedDeviceList>(
			0);
	private Set<TestEnvironmentDevices> testEnvironmentDevices = new HashSet<TestEnvironmentDevices>(
			0);
	private Set<TestRunList> testRunLists = new HashSet<TestRunList>(0);
	
	private DeviceLab deviceLab;
	
	public DeviceList() {
	}

	public DeviceList(HostList hostList, DeviceModelMaster deviceModelMaster,
			DevicePlatformVersionListMaster devicePlatformVersionListMaster,
			CommonActiveStatusMaster commonActiveStatusMaster, String deviceId) {
		this.hostList = hostList;
		this.deviceModelMaster = deviceModelMaster;
		this.devicePlatformVersionListMaster = devicePlatformVersionListMaster;
		this.commonActiveStatusMaster = commonActiveStatusMaster;
		this.deviceId = deviceId;
	}

	public DeviceList(HostList hostList, DeviceModelMaster deviceModelMaster,
			DevicePlatformVersionListMaster devicePlatformVersionListMaster,
			CommonActiveStatusMaster commonActiveStatusMaster, String deviceId,
			Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists,
			Set<TestEnvironmentDevices> testEnvironmentDevices,
			Set<TestRunList> testRunLists) {
		this.hostList = hostList;
		this.deviceModelMaster = deviceModelMaster;
		this.devicePlatformVersionListMaster = devicePlatformVersionListMaster;
		this.commonActiveStatusMaster = commonActiveStatusMaster;
		this.deviceId = deviceId;
		this.testRunSelectedDeviceLists = testRunSelectedDeviceLists;
		this.testEnvironmentDevices = testEnvironmentDevices;
		this.testRunLists = testRunLists;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "deviceListId", unique = true, nullable = false)
	public Integer getDeviceListId() {
		return this.deviceListId;
	}

	public void setDeviceListId(Integer deviceListId) {
		this.deviceListId = deviceListId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "hostId", nullable = false)
	public HostList getHostList() {
		return this.hostList;
	}

	public void setHostList(HostList hostList) {
		this.hostList = hostList;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deviceModelListId",nullable=false)
	public DeviceModelMaster getDeviceModelMaster() {
		return this.deviceModelMaster;
	}

	public void setDeviceModelMaster(DeviceModelMaster deviceModelMaster) {
		this.deviceModelMaster = deviceModelMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "devicePlatformVersionListId", nullable = false)
	public DevicePlatformVersionListMaster getDevicePlatformVersionListMaster() {
		return this.devicePlatformVersionListMaster;
	}

	public void setDevicePlatformVersionListMaster(
			DevicePlatformVersionListMaster devicePlatformVersionListMaster) {
		this.devicePlatformVersionListMaster = devicePlatformVersionListMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deviceStatus", nullable = false)
	public CommonActiveStatusMaster getCommonActiveStatusMaster() {
		return this.commonActiveStatusMaster;
	}

	public void setCommonActiveStatusMaster(
			CommonActiveStatusMaster commonActiveStatusMaster) {
		this.commonActiveStatusMaster = commonActiveStatusMaster;
	}

	@Column(name = "deviceId", unique = true, nullable = false, length = 150)
	public String getDeviceId() {
		return this.deviceId;
	}

	public void setDeviceId(String deviceId) {
		this.deviceId = deviceId;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "deviceList")
	public Set<TestRunSelectedDeviceList> getTestRunSelectedDeviceLists() {
		return this.testRunSelectedDeviceLists;
	}

	public void setTestRunSelectedDeviceLists(
			Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists) {
		this.testRunSelectedDeviceLists = testRunSelectedDeviceLists;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "deviceList")
	public Set<TestEnvironmentDevices> getTestEnvironmentDevices() {		
		return this.testEnvironmentDevices;
	}

	public void setTestEnvironmentDevices(
			Set<TestEnvironmentDevices> testEnvironmentDevices) {
		this.testEnvironmentDevices = testEnvironmentDevices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "deviceList")
	public Set<TestRunList> getTestRunLists() {
		
		return this.testRunLists;
	}

	public void setTestRunLists(Set<TestRunList> testRunLists) {
		this.testRunLists = testRunLists;
	}
	
	@Override
	public boolean equals(Object deviceList) {
		
		if (deviceList == null)
			return false;
		DeviceList device = (DeviceList) deviceList;
		if (device.getDeviceId().equals(this.deviceId) || device.getDeviceListId().equals(this.deviceListId)) {
			return true;
		} else {
			return false;
		}
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deviceLabId", nullable = false)
	public DeviceLab getDeviceLab() {
		return deviceLab;
	}

	public void setDeviceLab(DeviceLab deviceLab) {
		this.deviceLab = deviceLab;
	}
	
	
}
