package com.hcl.atf.taf.model;

// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.hcl.ilcm.workflow.model.WorkflowStatus;

/**
 * TestExecutionResult generated by hbm2java
 */
@Entity
@Table(name = "testcase_execution_result")
public class TestCaseExecutionResult implements java.io.Serializable {

	private Integer testCaseExecutionResultId;
	private String result;
	private WorkPackageTestCaseExecutionPlan workPackageTestCaseExecutionPlan;
	private Integer defectsCount;
	private String defectIds;
	private String comments;
	private Integer isApproved;
	private Integer isReviewed;
	private String observedOutput;
	private String failureReason;
	private Long executionTime;
	
	private Date startTime; 
	private Date endTime; 
	private TestSuiteList testSuiteList;
	
	
	private Set<TestExecutionResultBugList> testExecutionResultBugListSet;
	
	private WorkflowStatus workflowStatus;
	
	private UserList assignee;
	
	private UserList reviewer;
	
	private String analysisRemarks;
	
	private String analysisOutCome;
	
	private EnvironmentCombination environmentCombination;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCaseExecutionResult",cascade=CascadeType.ALL)
	public Set<TestExecutionResultBugList> getTestExecutionResultBugListSet() {
		return testExecutionResultBugListSet;
	}

	public void setTestExecutionResultBugListSet(
			Set<TestExecutionResultBugList> testExecutionResultBugListSet) {
		this.testExecutionResultBugListSet = testExecutionResultBugListSet;
	}

private Set<TestStepExecutionResult> testStepExecutionResultSet;
	public TestCaseExecutionResult() {
	}

	@Id
	@Column(name = "testCaseExecutionResultId", unique = true, nullable = false)
	@GeneratedValue(generator = "gen")  
	@GenericGenerator(name = "gen", strategy = "foreign", parameters = @Parameter(name = "property", value = "workPackageTestCaseExecutionPlan"))  
	public Integer getTestCaseExecutionResultId() {
		return this.testCaseExecutionResultId;
	}

	public void setTestCaseExecutionResultId(Integer testCaseExecutionResultId) {
		this.testCaseExecutionResultId = testCaseExecutionResultId;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public WorkPackageTestCaseExecutionPlan getWorkPackageTestCaseExecutionPlan() {
		return this.workPackageTestCaseExecutionPlan;
	}

	public void setWorkPackageTestCaseExecutionPlan(WorkPackageTestCaseExecutionPlan workPackageTestCaseExecutionPlan) {
		this.workPackageTestCaseExecutionPlan = workPackageTestCaseExecutionPlan;
	}

	@Column(name = "comments", length = 2000)
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@Column(name = "result", length = 1000)
	public String getResult() {
		return this.result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	@Column(name = "defectsCount")
	public Integer getDefectsCount() {
		return this.defectsCount;
	}

	public void setDefectsCount(Integer defectsCount) {
		this.defectsCount = defectsCount;
	}

	@Column(name = "defectIds")
	public String getDefectIds() {
		return this.defectIds;
	}

	public void setDefectIds(String defectIds) {
		this.defectIds = defectIds;
	}
	@Column(name = "isApproved")
	public Integer getIsApproved() {
		return isApproved;
	}

	public void setIsApproved(Integer isApproved) {
		this.isApproved = isApproved;
	}
	@Column(name = "isReviewed")
	public Integer getIsReviewed() {
		return isReviewed;
	}

	public void setIsReviewed(Integer isReviewed) {
		this.isReviewed = isReviewed;
	}
	@Column(name = "observedOutput")
	public String getObservedOutput() {
		return observedOutput;
	}

	public void setObservedOutput(String observedOutput) {
		this.observedOutput = observedOutput;
	}

	@Column(name = "executionTime")
	public Long getExecutionTime() {
		return executionTime;
	}

	public void setExecutionTime(Long executionTime) {
		this.executionTime = executionTime;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCaseExecutionResult",cascade=CascadeType.ALL)
	public Set<TestStepExecutionResult> getTestStepExecutionResultSet() {
		return testStepExecutionResultSet;
	}

	public void setTestStepExecutionResultSet(
			Set<TestStepExecutionResult> testStepExecutionResultSet) {
		this.testStepExecutionResultSet = testStepExecutionResultSet;
	}
	@Column(name = "failureReason")
	public String getFailureReason() {
		return failureReason;
	}

	public void setFailureReason(String failureReason) {
		this.failureReason = failureReason;
	}
	
	@Column(name = "startTime")
	public Date getStartTime() {
		return startTime;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	@Column(name = "endTime")
	public Date getEndTime() {
		return endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testSuiteId")
	public TestSuiteList getTestSuiteList() {
		return testSuiteList;
	}

	public void setTestSuiteList(TestSuiteList testSuiteList) {
		this.testSuiteList = testSuiteList;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "workflowStatusId")
	public WorkflowStatus getWorkflowStatus() {
		return workflowStatus;
	}

	public void setWorkflowStatus(WorkflowStatus workflowStatus) {
		this.workflowStatus = workflowStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "assignee")
	public UserList getAssignee() {
		return assignee;
	}

	public void setAssignee(UserList assignee) {
		this.assignee = assignee;
	}


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "reviewer")
	public UserList getReviewer() {
		return reviewer;
	}

	public void setReviewer(UserList reviewer) {
		this.reviewer = reviewer;
	}

	@Column(name="analysisRemarks")
	public String getAnalysisRemarks() {
		return analysisRemarks;
	}

	public void setAnalysisRemarks(String analysisRemarks) {
		this.analysisRemarks = analysisRemarks;
	}

	@Column(name="analysisOutCome")
	public String getAnalysisOutCome() {
		return analysisOutCome;
	}

	public void setAnalysisOutCome(String analysisOutCome) {
		this.analysisOutCome = analysisOutCome;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "environmentCombinationId")
	public EnvironmentCombination getEnvironmentCombination() {
		return environmentCombination;
	}

	public void setEnvironmentCombination(
			EnvironmentCombination environmentCombination) {
		this.environmentCombination = environmentCombination;
	}

}
