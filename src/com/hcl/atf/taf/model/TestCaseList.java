package com.hcl.atf.taf.model;

// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.hcl.ilcm.workflow.model.WorkflowStatus;

/**
 * TestCaseList generated by hbm2java
 */
@Entity
@Table(name = "test_case_list")
public class TestCaseList implements java.io.Serializable {

	private Integer testCaseId;
	private ProductMaster productMaster;
	private String testCaseName;
	private String testCaseDescription;
	private String testCaseCode;

	private Date testCaseCreatedDate;
	private String testcaseType;
	private Date testCaseLastUpdatedDate;
	private String testCaseSource;
	private Integer testcaseExecutionType;

	private String testcaseinput;
	private String testcaseexpectedoutput;
	private String preconditions;

	private String testCaseScriptQualifiedName;
	private String testCaseScriptFileName;

	private Set<TestSuiteList> testSuiteLists = new HashSet<TestSuiteList>(0);
	private Set<TestExecutionResult> testExecutionResults = new HashSet<TestExecutionResult>(0);
	private Set<TestCaseStepsList> testCaseStepsLists = new HashSet<TestCaseStepsList>(0);
	private Set<WorkPackage> workPackageList = new HashSet<WorkPackage>(0);
	private Set<ProductVersionListMaster> productVersionList = new HashSet<ProductVersionListMaster>(0);

	private ExecutionTypeMaster executionTypeMaster;
	private TestCasePriority testCasePriority;
	private TestcaseTypeMaster testcaseTypeMaster;

	private Set<WorkPackageTestCaseExecutionPlan>  workPackageTestCaseExecutionPlan=new HashSet<WorkPackageTestCaseExecutionPlan>(0);

	private Set<TestRunJob>  testRunJobSet=new HashSet<TestRunJob>(0);
	private Set<TestRunPlan> testRunPlanList = new HashSet<TestRunPlan>(0);

	private Integer status;

	private Set<Risk> risk;

	private Set<ProductFeature> productFeature = new HashSet<ProductFeature>(0);
	private WorkflowStatus workflowStatus;

	private Integer totalEffort;

	private Integer testCaseExecutionOrder;

	private Set<TestCaseEntityGroup> testCaseEntityGroup = new HashSet<TestCaseEntityGroup>(0);

	private Set<TestCaseScript> testCaseScripts = new HashSet<TestCaseScript>(0);

	private String testCaePredecessors; 
	private ProductType productType;

	@Column(name = "testCaseExecutionOrder")
	public Integer getTestCaseExecutionOrder() {
		return testCaseExecutionOrder;
	}

	public void setTestCaseExecutionOrder(Integer testCaseExecutionOrder) {
		this.testCaseExecutionOrder = testCaseExecutionOrder;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCase",cascade=CascadeType.ALL)
	public Set<WorkPackageTestCaseExecutionPlan> getWorkPackageTestCaseExecutionPlan() {
		return workPackageTestCaseExecutionPlan;
	}

	public void setWorkPackageTestCaseExecutionPlan(
			Set<WorkPackageTestCaseExecutionPlan> workPackageTestCaseExecutionPlan) {
		this.workPackageTestCaseExecutionPlan = workPackageTestCaseExecutionPlan;
	}


	private Integer mappedTestscriptCount;
	private Integer mappedFeatueCount;

	public TestCaseList() {
	}

	public TestCaseList(String testCaseName) {
		this.testCaseName = testCaseName;
	}

	public TestCaseList(ProductMaster productMaster,
			String testCaseName, String testCaseDescription,
			String testCaseCode, Set<TestSuiteList> testSuiteLists,
			Set<TestExecutionResult> testExecutionResults,
			Set<TestCaseStepsList> testCaseStepsLists) {
		this.productMaster = productMaster;
		this.testCaseName = testCaseName;
		this.testCaseDescription = testCaseDescription;
		this.testCaseCode = testCaseCode;
		this.testSuiteLists = testSuiteLists;
		this.testExecutionResults = testExecutionResults;
		this.testCaseStepsLists = testCaseStepsLists;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "testCaseId", unique = true, nullable = false)
	public Integer getTestCaseId() {
		return this.testCaseId;
	}

	public void setTestCaseId(Integer testCaseId) {
		this.testCaseId = testCaseId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productId")
	public ProductMaster getProductMaster() {
		return this.productMaster;
	}

	public void setProductMaster(ProductMaster productMaster) {
		this.productMaster = productMaster;
	}

	@Column(name = "testCaseName")
	public String getTestCaseName() {
		return this.testCaseName;
	}

	public void setTestCaseName(String testCaseName) {
		this.testCaseName = testCaseName;
	}

	@Column(name = "testCaseDescription")
	public String getTestCaseDescription() {
		return this.testCaseDescription;
	}

	public void setTestCaseDescription(String testCaseDescription) {
		this.testCaseDescription = testCaseDescription;
	}

	@Column(name = "testCaseCode")
	public String getTestCaseCode() {
		return this.testCaseCode;
	}

	public void setTestCaseCode(String testCaseCode) {
		this.testCaseCode = testCaseCode;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseLists",cascade=CascadeType.ALL)
	public Set<TestSuiteList> getTestSuiteLists() {
		return this.testSuiteLists;
	}

	public void setTestSuiteLists(Set<TestSuiteList> testSuiteLists) {
		this.testSuiteLists = testSuiteLists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<TestExecutionResult> getTestExecutionResults() {
		return this.testExecutionResults;
	}

	public void setTestExecutionResults(
			Set<TestExecutionResult> testExecutionResults) {
		this.testExecutionResults = testExecutionResults;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList")
	public Set<TestCaseStepsList> getTestCaseStepsLists() {
		return this.testCaseStepsLists;
	}

	public void setTestCaseStepsLists(Set<TestCaseStepsList> testCaseStepsLists) {
		this.testCaseStepsLists = testCaseStepsLists;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "testCaseCreatedDate")
	public Date getTestCaseCreatedDate() {
		return testCaseCreatedDate;
	}

	public void setTestCaseCreatedDate(Date testCaseCreatedDate) {
		this.testCaseCreatedDate = testCaseCreatedDate;
	}

	@Column(name = "testcaseType")
	public String getTestCaseType() {
		return testcaseType;
	}

	public void setTestCaseType(String testCaseType) {
		this.testcaseType = testCaseType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "testCaseLastUpdatedDate")
	public Date getTestCaseLastUpdatedDate() {
		return testCaseLastUpdatedDate;
	}

	public void setTestCaseLastUpdatedDate(Date testCaseLastUpdatedDate) {
		this.testCaseLastUpdatedDate = testCaseLastUpdatedDate;
	}

	@Column(name = "testCaseSource")
	public String getTestCaseSource() {
		return testCaseSource;
	}

	public void setTestCaseSource(String testCaseSource) {
		this.testCaseSource = testCaseSource;
	}

	@Column(name = "testCaseScriptQualifiedName")
	public String getTestCaseScriptQualifiedName() {
		return this.testCaseScriptQualifiedName;
	}

	public void setTestCaseScriptQualifiedName(String testCaseScriptQualifiedName) {
		this.testCaseScriptQualifiedName = testCaseScriptQualifiedName;
	}

	@Column(name = "testCaseScriptFileName")
	public String getTestCaseScriptFileName() {
		return this.testCaseScriptFileName;
	}

	public void setTestCaseScriptFileName(String testCaseScriptFileName) {
		this.testCaseScriptFileName = testCaseScriptFileName;
	}

	@Override
	public boolean equals(Object testCaseList) {

		if (testCaseList == null)
			return false;
		TestCaseList testCase = (TestCaseList) testCaseList;
		if (testCase.getTestCaseId().equals(this.testCaseId)) {
			return true;
		} else {
			return false;
		}
	}

	private Set<DecouplingCategory> decouplingCategory = new HashSet<DecouplingCategory>(0);

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList")
	public Set<DecouplingCategory> getDecouplingCategory() {
		return decouplingCategory;
	}

	public void setDecouplingCategory(Set<DecouplingCategory> decouplingCategory) {
		this.decouplingCategory = decouplingCategory;
	}




	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<ProductFeature> getProductFeature() {
		return productFeature;
	}

	public void setProductFeature(Set<ProductFeature> productFeature) {
		this.productFeature = productFeature;
	}

	@Column(name = "testcaseExecutionType")
	public Integer getTestcaseExecutionType() {
		return testcaseExecutionType;
	}

	public void setTestcaseExecutionType(Integer testcaseExecutionType) {
		this.testcaseExecutionType = testcaseExecutionType;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testcaseList",cascade=CascadeType.ALL)
	public Set<WorkPackage> getWorkPackageList() {
		return workPackageList;
	}

	public void setWorkPackageList(Set<WorkPackage> workPackageList) {
		this.workPackageList = workPackageList;
	}
	@Column(name = "testcaseinput")
	public String getTestcaseinput() {
		return testcaseinput;
	}

	public void setTestcaseinput(String testcaseinput) {
		this.testcaseinput = testcaseinput;
	}
	@Column(name = "testcaseexpectedoutput")
	public String getTestcaseexpectedoutput() {
		return testcaseexpectedoutput;
	}

	public void setTestcaseexpectedoutput(String testcaseexpectedoutput) {
		this.testcaseexpectedoutput = testcaseexpectedoutput;
	}
	@Column(name = "preconditions")
	public String getPreconditions() {
		return preconditions;
	}

	public void setPreconditions(String preconditions) {
		this.preconditions = preconditions;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseLists",cascade=CascadeType.ALL)
	public Set<ProductVersionListMaster> getProductVersionList() {
		return productVersionList;
	}

	public void setProductVersionList(Set<ProductVersionListMaster> productVersionList) {
		this.productVersionList = productVersionList;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "executionTypeId")
	public ExecutionTypeMaster getExecutionTypeMaster() {
		return executionTypeMaster;
	}

	public void setExecutionTypeMaster(ExecutionTypeMaster executionTypeMaster) {
		this.executionTypeMaster = executionTypeMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testcasePriorityId")
	public TestCasePriority getTestCasePriority() {
		return testCasePriority;
	}

	public void setTestCasePriority(TestCasePriority testCasePriority) {
		this.testCasePriority = testCasePriority;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testcaseTypeId")
	public TestcaseTypeMaster getTestcaseTypeMaster() {
		return testcaseTypeMaster;
	}

	public void setTestcaseTypeMaster(TestcaseTypeMaster testcaseTypeMaster) {
		this.testcaseTypeMaster = testcaseTypeMaster;
	}


	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseListSet",cascade=CascadeType.ALL)
	public Set<TestRunJob> getTestRunJobSet() {
		return testRunJobSet;
	}

	public void setTestRunJobSet(Set<TestRunJob> testRunJobSet) {
		this.testRunJobSet = testRunJobSet;
	}

	@Override
	public int hashCode(){
		return (int) testCaseId;
	}
	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<TestRunPlan> getTestRunPlanList() {
		return testRunPlanList;
	}

	public void setTestRunPlanList(Set<TestRunPlan> testRunPlanList) {
		this.testRunPlanList = testRunPlanList;
	}

	@Column(name ="status")
	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<Risk> getRisk() {
		return risk;
	}

	public void setRisk(Set<Risk> risk) {
		this.risk = risk;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "workflowStatusId")
	public WorkflowStatus getWorkflowStatus() {
		return workflowStatus;
	}

	public void setWorkflowStatus(WorkflowStatus workflowStatus) {
		this.workflowStatus = workflowStatus;
	}

	@Column(name="totalEffort")
	public Integer getTotalEffort() {
		return totalEffort;
	}

	public void setTotalEffort(Integer totalEffort) {
		this.totalEffort = totalEffort;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<TestCaseEntityGroup> getTestCaseEntityGroup() {
		return testCaseEntityGroup;
	}

	public void setTestCaseEntityGroup(Set<TestCaseEntityGroup> testCaseEntityGroup) {
		this.testCaseEntityGroup = testCaseEntityGroup;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testCaseList",cascade=CascadeType.ALL)
	public Set<TestCaseScript> getTestCaseScripts() {
		return testCaseScripts;
	}

	public void setTestCaseScripts(Set<TestCaseScript> testCaseScripts) {
		this.testCaseScripts = testCaseScripts;
	}

	@Column(name = "predecessors")
	public String getTestCaePredecessors() {
		return testCaePredecessors;
	}

	public void setTestCaePredecessors(String testCaePredecessors) {
		this.testCaePredecessors = testCaePredecessors;
	}

	@Transient
	public Integer getMappedTestscriptCount() {
		return mappedTestscriptCount;
	}

	@Transient
	public Integer getMappedFeatueCount() {
		return mappedFeatueCount;
	}

	public void setMappedTestscriptCount(Integer mappedTestscriptCount) {
		this.mappedTestscriptCount = mappedTestscriptCount;
	}

	public void setMappedFeatueCount(Integer mappedFeatueCount) {
		this.mappedFeatueCount = mappedFeatueCount;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="productTypeId")
	public ProductType getProductType() {
		return this.productType;
	}

	public void setProductType(ProductType productType) {
		this.productType = productType;
	}

}
