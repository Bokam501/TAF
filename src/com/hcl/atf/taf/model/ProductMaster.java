package com.hcl.atf.taf.model;


// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ProductMaster generated by hbm2java
 */
@Entity
@Table(name = "product_master")
public class ProductMaster implements java.io.Serializable {

	private Integer productId;
	private String productName;
	private String projectCode;
	private String projectName;
	private String productDescription;
	private Set<TestSuiteList> testSuiteLists = new HashSet<TestSuiteList>(0);
	private Set<TestCaseList> testCaseLists = new HashSet<TestCaseList>(0);
	private Integer status;
	private Date createdDate;
	private Date statusChangeDate;
	

	private TestFactory testFactory;
	private Customer customer;
	private ProductMode productMode;
	private Set<ProductVersionListMaster> productVersionListMasters = new HashSet<ProductVersionListMaster>(0);
	private Set<TestRunConfigurationParent> testRunConfigurationParents = new HashSet<TestRunConfigurationParent>(0);
	private Set<ProductFeature> productFeatures = new HashSet<ProductFeature>(0);
	private Set<DecouplingCategory> decouplingCategory = new HashSet<DecouplingCategory>(0);

	//Changes for integration with DefectManagementSystems
	private Set<DefectManagementSystem> defectManagementSystems = new HashSet<DefectManagementSystem>(0);
	private Set<DefectManagementSystemMapping> defectManagementSystemMappings = new HashSet<DefectManagementSystemMapping>(0);
	//Changes for integration with TestManagementSystems
	private Set<TestManagementSystem> testManagementSystems = new HashSet<TestManagementSystem>(0);
	private Set<TestManagementSystemMapping> testManagementSystemMappings = new HashSet<TestManagementSystemMapping>(0);
	private Set<ResourceShiftCheckIn> resourceShiftCheckInSet = new HashSet<ResourceShiftCheckIn>(0);
	private ProductType productType;
	
	private Integer shiftAttendanceGraceTime;
	private Integer weeklyOverTimeLimit;
	private Integer shiftLunchAuthorisedTime;
	private Integer shiftBreaksAuthorisedTime;
	private Set<GenericDevices> genericeDevices = new HashSet<GenericDevices>(0);
	private Set<HostList> hostLists = new HashSet<HostList>(0);

	private Set<ProductTeamResources> productTeamResources = new HashSet<ProductTeamResources>(0);
	private Set<TestFactoryProductCoreResource> productCoreResources = new HashSet<TestFactoryProductCoreResource>(0);
	
	private Set<ProductUserRole> productUserRoles = new HashSet<ProductUserRole>(0);
	public ProductMaster() {
	}

	public ProductMaster(String productName) {
		this.productName = productName;
	}

	public ProductMaster(String productName, String projectCode,String projectName,
			String productDescription, Set<TestSuiteList> testSuiteLists,
			Set<TestCaseList> testCaseLists,
			Set<ProductVersionListMaster> productVersionListMasters,
			Set<TestRunConfigurationParent> testRunConfigurationParents, 
			Set<ProductFeature> productFeatures,
			Set<DefectManagementSystem> defectManagementSystems,
			Set<DefectManagementSystemMapping> defectManagementSystemMappings,
			Set<TestManagementSystem> testManagementSystems,
			Set<TestManagementSystemMapping> testManagementSystemMappings) {
		this.productName = productName;
		this.projectCode = projectCode;
		this.projectName = projectName;
		this.productDescription = productDescription;
		this.testSuiteLists = testSuiteLists;
		this.testCaseLists = testCaseLists;
		this.productVersionListMasters = productVersionListMasters;
		this.testRunConfigurationParents = testRunConfigurationParents;
		this.productFeatures = productFeatures;
		this.defectManagementSystems = defectManagementSystems;
		this.defectManagementSystemMappings=defectManagementSystemMappings;
		this.testManagementSystems = testManagementSystems;
		this.testManagementSystemMappings=testManagementSystemMappings;
		
	}

	@Column(name = "shiftAttendanceGraceTime")
	public Integer getShiftAttendanceGraceTime() {
		return shiftAttendanceGraceTime;
	}

	public void setShiftAttendanceGraceTime(Integer shiftAttendanceGraceTime) {
		this.shiftAttendanceGraceTime = shiftAttendanceGraceTime;
	}

	@Column(name = "weeklyOverTimeLimit")
	public Integer getWeeklyOverTimeLimit() {
		return weeklyOverTimeLimit;
	}

	public void setWeeklyOverTimeLimit(Integer weeklyOverTimeLimit) {
		this.weeklyOverTimeLimit = weeklyOverTimeLimit;
	}

	@Column(name = "shiftLunchAuthorisedTime")
	public Integer getShiftLunchAuthorisedTime() {
		return shiftLunchAuthorisedTime;
	}

	public void setShiftLunchAuthorisedTime(Integer shiftLunchAuthorisedTime) {
		this.shiftLunchAuthorisedTime = shiftLunchAuthorisedTime;
	}
	
	@Column(name = "shiftBreaksAuthorisedTime")
	public Integer getShiftBreaksAuthorisedTime() {
		return shiftBreaksAuthorisedTime;
	}

	public void setShiftBreaksAuthorisedTime(Integer shiftBreaksAuthorisedTime) {
		this.shiftBreaksAuthorisedTime = shiftBreaksAuthorisedTime;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "productId", unique = true, nullable = false)
	public Integer getProductId() {
		return this.productId;
	}

	public void setProductId(Integer productId) {
		this.productId = productId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testFactoryId") 
	public TestFactory getTestFactory() {
		return testFactory;
	}

	public void setTestFactory(TestFactory testFactory) {
		this.testFactory = testFactory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customerId") 
	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Column(name = "productName")
	public String getProductName() {
		return this.productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	@Column(name = "productDescription")
	public String getProductDescription() {
		return this.productDescription;
	}

	public void setProductDescription(String productDescription) {
		this.productDescription = productDescription;
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "statusChangeDate")
	public Date getStatusChangeDate() {
		return this.statusChangeDate;
	}

	public void setStatusChangeDate(Date statusChangeDate) {
		this.statusChangeDate = statusChangeDate;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createdDate")
	public Date getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster", cascade=CascadeType.ALL)
	public Set<TestSuiteList> getTestSuiteLists() {
		return this.testSuiteLists;
	}

	public void setTestSuiteLists(Set<TestSuiteList> testSuiteLists) {
		this.testSuiteLists = testSuiteLists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<TestCaseList> getTestCaseLists() {
		return this.testCaseLists;
	}

	public void setTestCaseLists(Set<TestCaseList> testCaseLists) {
		this.testCaseLists = testCaseLists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster")
	public Set<ProductVersionListMaster> getProductVersionListMasters() {
		return this.productVersionListMasters;
	}

	public void setProductVersionListMasters(
			Set<ProductVersionListMaster> productVersionListMasters) {
		this.productVersionListMasters = productVersionListMasters;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster")
	public Set<TestRunConfigurationParent> getTestRunConfigurationParents() {
		return this.testRunConfigurationParents;
	}

	public void setTestRunConfigurationParents(
			Set<TestRunConfigurationParent> testRunConfigurationParents) {
		this.testRunConfigurationParents = testRunConfigurationParents;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<ProductFeature> getProductFeatures() {
		return this.productFeatures;
	}

	public void setProductFeatures(Set<ProductFeature> productFeatures) {
		this.productFeatures = productFeatures;
	}

	//Changes for DefectManagementsytem and mappings
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<DefectManagementSystem> getDefectManagementSystems() {
		return defectManagementSystems;
	}

	public void setDefectManagementSystems(
			Set<DefectManagementSystem> defectManagementSystems) {
		this.defectManagementSystems = defectManagementSystems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<DefectManagementSystemMapping> getDefectManagementSystemMappings() {
		return defectManagementSystemMappings;
	}

	public void setDefectManagementSystemMappings(
			Set<DefectManagementSystemMapping> defectManagementSystemMappings) {
		this.defectManagementSystemMappings = defectManagementSystemMappings;
	}
	
	//Changes for TestManagementsytem and mappings
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<TestManagementSystem> getTestManagementSystems() {
		return testManagementSystems;
	}

	public void setTestManagementSystems(
			Set<TestManagementSystem> testManagementSystems) {
		this.testManagementSystems = testManagementSystems;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<TestManagementSystemMapping> getTestManagementSystemMappings() {
		return testManagementSystemMappings;
	}

	public void setTestManagementSystemMappings(
			Set<TestManagementSystemMapping> testManagementSystemMappings) {
		this.testManagementSystemMappings = testManagementSystemMappings;
	}
	
	@Column(name = "projectCode")
	public String getProjectCode() {
		return projectCode;
	}

	public void setProjectCode(String projectCode) {
		this.projectCode = projectCode;
	}

	@Column(name = "projectName")
	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster", cascade=CascadeType.ALL)
	public Set<ResourceShiftCheckIn> getResourceShiftCheckInSet() {
		return resourceShiftCheckInSet;
	}

	public void setResourceShiftCheckInSet(
			Set<ResourceShiftCheckIn> resourceShiftCheckInSet) {
		this.resourceShiftCheckInSet = resourceShiftCheckInSet;
	}
	@Override
	public boolean equals(Object o) {
		ProductMaster productMaster = (ProductMaster) o;
		if (this.productId.equals(productMaster.getProductId())) {
			return true;
		}else{
			return false;
		}
	}
	
	@Override
	public int hashCode(){
	    return (int) productId;
	  }
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productTypeId") 
	public ProductType getProductType() {
		return productType;
	}

	public void setProductType(ProductType productType) {
		this.productType = productType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "modeId") 
	public ProductMode getProductMode() {
		return productMode;
	}

	public void setProductMode(ProductMode productMode) {
		this.productMode = productMode;
	}

	@ManyToMany(fetch = FetchType.LAZY,cascade=CascadeType.ALL)
	@JoinTable(name = "product_has_device", joinColumns = { @JoinColumn(name = "productId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "deviceId", nullable = false, updatable = false) })
	public Set<GenericDevices> getGenericeDevices() {
		return genericeDevices;
	}

	public void setGenericeDevices(Set<GenericDevices> genericeDevices) {
		this.genericeDevices = genericeDevices;
	}
	@ManyToMany(fetch = FetchType.LAZY,cascade=CascadeType.ALL)
	@JoinTable(name = "product_has_host", joinColumns = { @JoinColumn(name = "productId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "hostId", nullable = false, updatable = false) })
	public Set<HostList> getHostLists() {
		return hostLists;
	}

	public void setHostLists(Set<HostList> hostLists) {
		this.hostLists = hostLists;
	}

	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product",cascade=CascadeType.ALL)
	public Set<DecouplingCategory> getDecouplingCategory() {
		return decouplingCategory;
	}

	public void setDecouplingCategory(Set<DecouplingCategory> decouplingCategory) {
		this.decouplingCategory = decouplingCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<ProductTeamResources> getProductTeamResources() {
		return productTeamResources;
	}

	public void setProductTeamResources(
			Set<ProductTeamResources> productTeamResources) {
		this.productTeamResources = productTeamResources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productMaster",cascade=CascadeType.ALL)
	public Set<TestFactoryProductCoreResource> getProductCoreResources() {
		return productCoreResources;
	}

	public void setProductCoreResources(
			Set<TestFactoryProductCoreResource> productCoreResources) {
		this.productCoreResources = productCoreResources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product",cascade=CascadeType.ALL)
	public Set<ProductUserRole> getProductUserRoles() {
		return productUserRoles;
	}

	public void setProductUserRoles(Set<ProductUserRole> productUserRoles) {
		this.productUserRoles = productUserRoles;
	}
	
	
}
