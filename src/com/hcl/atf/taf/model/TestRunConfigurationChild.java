package com.hcl.atf.taf.model;

// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TestRunConfigurationChild generated by hbm2java
 */
@Entity
@Table(name = "test_run_configuration_child")
public class TestRunConfigurationChild implements java.io.Serializable {

	private Integer testRunConfigurationChildId;
	private TestRunConfigurationParent testRunConfigurationParent;
	private TestCategoryMaster testCategoryMaster;
	private TestSuiteList testSuiteList;
	private ProductVersionListMaster productVersionListMaster;
	private TestEnviromentMaster testEnviromentMaster;
	private Date testRunScheduledStartTime;
	private Integer testRunScheduledIntervalInHour;
	private Integer testRunRecurrenceLimit;
	private int lastRunNo;
	private String testRunCronSchedule;
	private String description;
	private String testRunConfigurationName;
	private Date testRunScheduledEndTime;
	private String locale;
	private String notifyByMail;
	private Integer status;
	private Integer autoPostResults;
	private Date statusChangeDate;
	private Set<TestRunList> testRunLists = new HashSet<TestRunList>(0);
	private Set<TestEnvironmentDevices> testEnvironmentDeviceses = new HashSet<TestEnvironmentDevices>(
			0);
	private Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists = new HashSet<TestRunSelectedDeviceList>(
			0);
	
	private Set<TrccExecutionPlan> trccExecutionPlan = new HashSet<TrccExecutionPlan>(0);

	public TestRunConfigurationChild() {
	}

	public TestRunConfigurationChild(
			TestRunConfigurationParent testRunConfigurationParent,
			TestCategoryMaster testCategoryMaster, TestSuiteList testSuiteList,
			ProductVersionListMaster productVersionListMaster,
			TestEnviromentMaster testEnviromentMaster, int lastRunNo) {
		this.testRunConfigurationParent = testRunConfigurationParent;
		this.testCategoryMaster = testCategoryMaster;
		this.testSuiteList = testSuiteList;
		this.productVersionListMaster = productVersionListMaster;
		this.testEnviromentMaster = testEnviromentMaster;
		this.lastRunNo = lastRunNo;
	}

	public TestRunConfigurationChild(
			TestRunConfigurationParent testRunConfigurationParent,
			TestCategoryMaster testCategoryMaster, TestSuiteList testSuiteList,
			ProductVersionListMaster productVersionListMaster,
			TestEnviromentMaster testEnviromentMaster,
			Date testRunScheduledStartTime,
			Integer testRunScheduledIntervalInHour,
			Integer testRunRecurrenceLimit, int lastRunNo,
			String testRunCronSchedule, String description,
			String testRunConfigurationName, Date testRunScheduledEndTime,
			String notifyByMail,
			Integer autoPostResults,
			Set<TestRunList> testRunLists,
			Set<TestEnvironmentDevices> testEnvironmentDeviceses,
			Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists) {
		this.testRunConfigurationParent = testRunConfigurationParent;
		this.testCategoryMaster = testCategoryMaster;
		this.testSuiteList = testSuiteList;
		this.productVersionListMaster = productVersionListMaster;
		this.testEnviromentMaster = testEnviromentMaster;
		this.testRunScheduledStartTime = testRunScheduledStartTime;
		this.testRunScheduledIntervalInHour = testRunScheduledIntervalInHour;
		this.testRunRecurrenceLimit = testRunRecurrenceLimit;
		this.lastRunNo = lastRunNo;
		this.testRunCronSchedule = testRunCronSchedule;
		this.description = description;
		this.testRunConfigurationName = testRunConfigurationName;
		this.testRunScheduledEndTime = testRunScheduledEndTime;
		this.testRunLists = testRunLists;
		this.testEnvironmentDeviceses = testEnvironmentDeviceses;
		this.testRunSelectedDeviceLists = testRunSelectedDeviceLists;
		this.notifyByMail = notifyByMail;
		this.autoPostResults = autoPostResults;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "testRunConfigurationChildId", unique = true, nullable = false)
	public Integer getTestRunConfigurationChildId() {
		return this.testRunConfigurationChildId;
	}

	public void setTestRunConfigurationChildId(
			Integer testRunConfigurationChildId) {
		this.testRunConfigurationChildId = testRunConfigurationChildId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testRunConfigurationParentId", nullable = false)
	public TestRunConfigurationParent getTestRunConfigurationParent() {
		return this.testRunConfigurationParent;
	}

	public void setTestRunConfigurationParent(
			TestRunConfigurationParent testRunConfigurationParent) {
		this.testRunConfigurationParent = testRunConfigurationParent;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testCategory", nullable = false)
	public TestCategoryMaster getTestCategoryMaster() {
		return this.testCategoryMaster;
	}

	public void setTestCategoryMaster(TestCategoryMaster testCategoryMaster) {
		this.testCategoryMaster = testCategoryMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testSuiteId", nullable = false)
	public TestSuiteList getTestSuiteList() {
		return this.testSuiteList;
	}

	public void setTestSuiteList(TestSuiteList testSuiteList) {
		this.testSuiteList = testSuiteList;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productVersionListId", nullable = false)
	public ProductVersionListMaster getProductVersionListMaster() {
		return this.productVersionListMaster;
	}

	public void setProductVersionListMaster(
			ProductVersionListMaster productVersionListMaster) {
		this.productVersionListMaster = productVersionListMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testEnvironmentId", nullable = false)
	public TestEnviromentMaster getTestEnviromentMaster() {
		return this.testEnviromentMaster;
	}

	public void setTestEnviromentMaster(
			TestEnviromentMaster testEnviromentMaster) {
		this.testEnviromentMaster = testEnviromentMaster;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "testRunScheduledStartTime", length = 19)
	public Date getTestRunScheduledStartTime() {
		return this.testRunScheduledStartTime;
	}

	public void setTestRunScheduledStartTime(Date testRunScheduledStartTime) {
		this.testRunScheduledStartTime = testRunScheduledStartTime;
	}

	@Column(name = "testRunScheduledIntervalInHour")
	public Integer getTestRunScheduledIntervalInHour() {
		return this.testRunScheduledIntervalInHour;
	}

	public void setTestRunScheduledIntervalInHour(
			Integer testRunScheduledIntervalInHour) {
		this.testRunScheduledIntervalInHour = testRunScheduledIntervalInHour;
	}

	@Column(name = "testRunRecurrenceLimit")
	public Integer getTestRunRecurrenceLimit() {
		return this.testRunRecurrenceLimit;
	}

	public void setTestRunRecurrenceLimit(Integer testRunRecurrenceLimit) {
		this.testRunRecurrenceLimit = testRunRecurrenceLimit;
	}

	@Column(name = "lastRunNo", nullable = false)
	public int getLastRunNo() {
		return this.lastRunNo;
	}

	public void setLastRunNo(int lastRunNo) {
		this.lastRunNo = lastRunNo;
	}

	@Column(name = "testRunCronSchedule", length = 45)
	public String getTestRunCronSchedule() {
		return this.testRunCronSchedule;
	}

	public void setTestRunCronSchedule(String testRunCronSchedule) {
		this.testRunCronSchedule = testRunCronSchedule;
	}
	@Column(name = "locale", length = 100)
	public String getLocale() {
		return locale;
	}

	public void setLocale(String locale) {
		this.locale = locale;
	}

	@Column(name = "notifyByMail", length = 1000)
	public String getNotifyByMail() {
		return this.notifyByMail;
	}

	public void setNotifyByMail(String notifyByMail) {
		this.notifyByMail = notifyByMail;
	}
	
	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	@Column(name = "autoPostResults", length = 1000)
	public Integer getAutoPostResults() {
		return autoPostResults;
	}

	public void setAutoPostResults(Integer autoPostResults) {
		this.autoPostResults = autoPostResults;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "statusChangeDate")
	public Date getStatusChangeDate() {
		return this.statusChangeDate;
	}

	public void setStatusChangeDate(Date statusChangeDate) {
		this.statusChangeDate = statusChangeDate;
	}

	@Column(name = "description", length = 1000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "testRunConfigurationName", length = 100)
	public String getTestRunConfigurationName() {
		return this.testRunConfigurationName;
	}

	public void setTestRunConfigurationName(String testRunConfigurationName) {
		this.testRunConfigurationName = testRunConfigurationName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "testRunScheduledEndTime", length = 19)
	public Date getTestRunScheduledEndTime() {
		return this.testRunScheduledEndTime;
	}

	public void setTestRunScheduledEndTime(Date testRunScheduledEndTime) {
		this.testRunScheduledEndTime = testRunScheduledEndTime;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testRunConfigurationChild")
	public Set<TestRunList> getTestRunLists() {
		return this.testRunLists;
	}

	public void setTestRunLists(Set<TestRunList> testRunLists) {
		this.testRunLists = testRunLists;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "test_run_configuration_child_has_test_environment_devices", joinColumns = { @JoinColumn(name = "testRunConfigurationChildId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "testEnvironmentDevicesId", nullable = false, updatable = false) })
	public Set<TestEnvironmentDevices> getTestEnvironmentDeviceses() {
		return this.testEnvironmentDeviceses;
	}

	public void setTestEnvironmentDeviceses(
			Set<TestEnvironmentDevices> testEnvironmentDeviceses) {
		this.testEnvironmentDeviceses = testEnvironmentDeviceses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testRunConfigurationChild")
	public Set<TestRunSelectedDeviceList> getTestRunSelectedDeviceLists() {
		return this.testRunSelectedDeviceLists;
	}

	public void setTestRunSelectedDeviceLists(
			Set<TestRunSelectedDeviceList> testRunSelectedDeviceLists) {
		this.testRunSelectedDeviceLists = testRunSelectedDeviceLists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testRunConfigurationChild")
	public Set<TrccExecutionPlan> getTrccExecutionPlan() {
		return this.trccExecutionPlan;
	}
	
	public void setTrccExecutionPlan(Set<TrccExecutionPlan> trccExecutionPlan) {
		this.trccExecutionPlan = trccExecutionPlan;
	}

}
