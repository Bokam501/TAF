package com.hcl.atf.taf.model;

// Generated Feb 4, 2014 4:30:16 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TestSuiteList generated by hbm2java
 */
@Entity
@Table(name = "test_suite_list")
public class TestSuiteList implements java.io.Serializable {

	private Integer testSuiteId;
	private ScriptTypeMaster scriptTypeMaster;
	private ProductMaster productMaster;
	private ProductVersionListMaster productVersionListMaster;
	private String testSuiteScriptFileLocation;
	private String testSuiteName;
	private String scriptPlatformLocation;
	private Set<TestCaseList> testCaseLists = new HashSet<TestCaseList>(0);
	private Set<TestRunConfigurationChild> testRunConfigurationChilds = new HashSet<TestRunConfigurationChild>(
			0);
	private Set<TestExecutionResult> testExecutionResults = new HashSet<TestExecutionResult>(
			0);
	private Integer status;
	private Date statusChangeDate;
	//Changes for Test Management tools integration.
	private String testSuiteCode;
	//Changes for Dynamic Script generation from different test script sources
	private String testScriptSource;
	private ExecutionTypeMaster executionTypeMaster;
	private Set<TestSuiteList> testSuiteList = new HashSet<TestSuiteList>(0);
	private Set<WorkPackage> workPackageList = new HashSet<WorkPackage>(0);
	private Set<TestRunPlan> testRunPlanList = new HashSet<TestRunPlan>(0);
	private Set<TestRunJob>  testRunJobSet=new HashSet<TestRunJob>(0);
	private String description;
	private TestCasePriority executionPriority;
	private Set<WorkPackageTestCaseExecutionPlan> wptcePlanSet = new HashSet<WorkPackageTestCaseExecutionPlan>(0);
	//Added for Composite Run Plan execution
	private Set<RunConfiguration> runConfigList = new HashSet<RunConfiguration>(0);
	private SCMSystem scmSystem;
	
	public TestSuiteList() {
	}

	public TestSuiteList(ScriptTypeMaster scriptTypeMaster,
			ProductMaster productMaster,
			ProductVersionListMaster productVersionListMaster, SCMSystem scmSystem,			
			String testSuiteScriptFileLocation, String testSuiteName,String testScriptSource) {
		this.scriptTypeMaster = scriptTypeMaster;
		this.productMaster = productMaster;
		this.productVersionListMaster = productVersionListMaster;
		this.testSuiteScriptFileLocation = testSuiteScriptFileLocation;
		this.testSuiteName = testSuiteName;
		this.testScriptSource = testScriptSource;
		this.scmSystem = scmSystem;
	}

	public TestSuiteList(ScriptTypeMaster scriptTypeMaster,
			ProductMaster productMaster,
			ProductVersionListMaster productVersionListMaster, SCMSystem scmSystem,
			String testSuiteScriptFileLocation, String testSuiteName,String testSuiteCode,			 
			Set<TestCaseList> testCaseLists,
			Set<TestRunConfigurationChild> testRunConfigurationChilds,
			Set<TestExecutionResult> testExecutionResults,String testScriptSource) {
		this.scriptTypeMaster = scriptTypeMaster;
		this.productMaster = productMaster;
		this.productVersionListMaster = productVersionListMaster;
		this.testSuiteScriptFileLocation = testSuiteScriptFileLocation;
		this.testSuiteName = testSuiteName;
		this.testSuiteCode = testSuiteCode;
		this.testCaseLists = testCaseLists;
		this.testRunConfigurationChilds = testRunConfigurationChilds;
		this.testExecutionResults = testExecutionResults;
		this.testScriptSource = testScriptSource;
		this.scmSystem = scmSystem;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "testSuiteId", unique = true, nullable = false)
	public Integer getTestSuiteId() {
		return this.testSuiteId;
	}

	public void setTestSuiteId(Integer testSuiteId) {
		this.testSuiteId = testSuiteId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testScriptType")
	public ScriptTypeMaster getScriptTypeMaster() {
		return this.scriptTypeMaster;
	}

	public void setScriptTypeMaster(ScriptTypeMaster scriptTypeMaster) {
		this.scriptTypeMaster = scriptTypeMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productId", nullable = false)
	public ProductMaster getProductMaster() {
		return this.productMaster;
	}

	public void setProductMaster(ProductMaster productMaster) {
		this.productMaster = productMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productVersionListId")
	public ProductVersionListMaster getProductVersionListMaster() {
		return this.productVersionListMaster;
	}

	public void setProductVersionListMaster(
			ProductVersionListMaster productVersionListMaster) {
		this.productVersionListMaster = productVersionListMaster;
	}

	@Column(name = "testSuiteScriptFileLocation", length = 150)
	public String getTestSuiteScriptFileLocation() {
		return this.testSuiteScriptFileLocation;
	}

	public void setTestSuiteScriptFileLocation(
			String testSuiteScriptFileLocation) {
		this.testSuiteScriptFileLocation = testSuiteScriptFileLocation;
	}

	@Column(name = "testSuiteName")
	public String getTestSuiteName() {
		return this.testSuiteName;
	}

	public void setTestSuiteName(String testSuiteName) {
		this.testSuiteName = testSuiteName;
	}
	
	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "statusChangeDate")
	public Date getStatusChangeDate() {
		return this.statusChangeDate;
	}

	public void setStatusChangeDate(Date statusChangeDate) {
		this.statusChangeDate = statusChangeDate;
	}

	@ManyToMany(fetch = FetchType.LAZY,cascade=CascadeType.ALL)
	@JoinTable(name = "test_suite_list_has_test_case_list", joinColumns = { @JoinColumn(name = "testSuiteId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "testCaseId", nullable = false, updatable = false) })
	public Set<TestCaseList> getTestCaseLists() {
		return testCaseLists;
	}

	public void setTestCaseLists(Set<TestCaseList> testCaseLists) {
		this.testCaseLists = testCaseLists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteList",cascade=CascadeType.ALL)
	public Set<TestRunConfigurationChild> getTestRunConfigurationChilds() {
		return this.testRunConfigurationChilds;
	}

	public void setTestRunConfigurationChilds(
			Set<TestRunConfigurationChild> testRunConfigurationChilds) {
		this.testRunConfigurationChilds = testRunConfigurationChilds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteList",cascade=CascadeType.ALL)
	public Set<TestExecutionResult> getTestExecutionResults() {
		return this.testExecutionResults;
	}

	public void setTestExecutionResults(
			Set<TestExecutionResult> testExecutionResults) {
		this.testExecutionResults = testExecutionResults;
	}
	
	@Column(name = "testSuiteCode")
	public String getTestSuiteCode() {
		return testSuiteCode;
	}

	public void setTestSuiteCode(String testSuiteCode) {
		this.testSuiteCode = testSuiteCode;
	}

	@Column(name = "testScriptSource")
	public String getTestScriptSource() {
		return testScriptSource;
	}

	public void setTestScriptSource(String testScriptSource) {
		this.testScriptSource = testScriptSource;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "executionTypeId")
	public ExecutionTypeMaster getExecutionTypeMaster() {
		return executionTypeMaster;
	}

	public void setExecutionTypeMaster(ExecutionTypeMaster executionTypeMaster) {
		this.executionTypeMaster = executionTypeMaster;
	}

	@ManyToMany(fetch = FetchType.LAZY,cascade=CascadeType.ALL)
	@JoinTable(name = "test_suite_list_has_test_suite_list", joinColumns = { @JoinColumn(name = "testSuiteId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "mappedtestSuiteId", nullable = false, updatable = false) })
	public Set<TestSuiteList> getTestSuiteList() {
		return testSuiteList;
	}

	public void setTestSuiteList(Set<TestSuiteList> testSuiteList) {
		this.testSuiteList = testSuiteList;
	}

	
	
	@Override
	public int hashCode(){
	    return (int) testSuiteId;
	  }
	
	@Override
	public boolean equals(Object testSuiteList) {
	
		if (testSuiteList == null)
			return false;
		TestSuiteList testSuite = (TestSuiteList) testSuiteList;
		if (testSuite.getTestSuiteId().equals(this.testSuiteId)) {
			
			return true;
		} else {
			return false;
		}
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteList",cascade=CascadeType.ALL)
	public Set<WorkPackage> getWorkPackageList() {
		return workPackageList;
	}

	public void setWorkPackageList(Set<WorkPackage> workPackageList) {
		this.workPackageList = workPackageList;
	}
	
	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteLists",cascade=CascadeType.ALL)
	public  Set<TestRunPlan> getTestRunPlanList() {
		return testRunPlanList;
	}

	public  void setTestRunPlanList(Set<TestRunPlan> testRunPlanList) {
		this.testRunPlanList = testRunPlanList;
	}
	
	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteSet",cascade=CascadeType.ALL)
	public Set<TestRunJob> getTestRunJobSet() {
		return testRunJobSet;
	}

	public void setTestRunJobSet(Set<TestRunJob> testRunJobSet) {
		this.testRunJobSet = testRunJobSet;
	}
	@Column(name = "testSuiteDescription")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "executionPriorityId")
	public TestCasePriority getExecutionPriority() {
		return executionPriority;
	}

	public void setExecutionPriority(TestCasePriority executionPriority) {
		this.executionPriority = executionPriority;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteList",cascade=CascadeType.ALL)
	public Set<WorkPackageTestCaseExecutionPlan> getWptcePlanSet() {
		return wptcePlanSet;
	}

	public void setWptcePlanSet(Set<WorkPackageTestCaseExecutionPlan> wptcePlanSet) {
		this.wptcePlanSet = wptcePlanSet;
	}

	@Column(name = "scriptPlatformLocation")
	public String getScriptPlatformLocation() {
		return scriptPlatformLocation;
	}

	public void setScriptPlatformLocation(String scriptPlatformLocation) {
		this.scriptPlatformLocation = scriptPlatformLocation;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "testSuiteLists",cascade=CascadeType.ALL)
	public Set<RunConfiguration> getRunConfigList() {
		return runConfigList;
	}

	public void setRunConfigList(Set<RunConfiguration> runConfigList) {
		this.runConfigList = runConfigList;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="scmSystemId" , nullable=true)
	public SCMSystem getScmSystem() {
		return scmSystem;
	}
	
	public void setScmSystem(SCMSystem scmSystem) {
		this.scmSystem = scmSystem;
	}
	
	
}